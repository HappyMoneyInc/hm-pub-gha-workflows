# version 1.1.2
# This workflow provisions launch darkly through terraform yaml files. Each
# launch darkly project and environment is mapped to HM_ACTIVE_ENV.
# Terraform Best Practices: https://github.com/ozbillwang/terraform-best-practices
# Terraform Advanced: https://github.com/AndrewFarley/advanced-terraform

# The majority of this code was copied from existing workflow files developed by @acates.  I have made some
# minor changes related to deleting steps that are not relevant to our workflow or parameterizing code  to
# make it more applicable across repositories

name: WF Tf Flags
on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to match against LaunchDarkly Project'
        required: true
        type: string
      projectName:
        description: 'Name of project, e.g., `happy-admin-portal`'
        required: true
        type: string
      ldProjectKey:
        description: 'The id of the launch darkly project to use'
        required: true
        type: string
    secrets:
      LAUNCH_DARKLY_ACCESS_TOKEN:
        description: 'LaunchDarkly API access token used to authorize terraform actions'
        required: true
      GPR_PAT:
        description: 'Token with the necessary scopes to find package versions'
        required: true

concurrency:
  group: ci-terraform-${{ inputs.environment }}
  cancel-in-progress: false

jobs:

  terraform:
    name: Tf LD Flags â†’ AWS S3
    runs-on: ubuntu-latest
    # The id-token permissions is needed to interact with GitHub's OIDC Token
    # endpoint. If you specify the access for any scopes, all of those that are
    # not specified are set to `none`, hence why we are setting the rest to
    # `read`.
    permissions:
      id-token: write
      actions: read
      checks: read
      contents: read
      deployments: read
      issues: read
      packages: read
      pull-requests: read
      repository-projects: read
      security-events: read
      statuses: read
    outputs:
      fmt: ${{ steps.fmt.outcome }}
      init: ${{ steps.init.outcome }}
      validate: ${{ steps.validate.outputs.stdout }}
      terraform: ${{ steps.plan.outputs.stdout }}
      plan: ${{ steps.plan.outcome }}
    environment:
      name: ${{ inputs.environment }}
    env:
      HM_ACTIVE_ENV: ${{ inputs.environment }}
      TF_VAR_LAUNCH_DARKLY_ACCESS_TOKEN: ${{ secrets.LAUNCH_DARKLY_ACCESS_TOKEN }}

    # log into shared services account
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::730502903637:role/iam-${{ inputs.projectName }}-ci
          aws-region: us-east-1
          mask-aws-account-id: 'yes'

      - name: ðŸ¤˜ Getting the repo
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Setup Terraform and Cache
        uses: hashicorp/setup-terraform@v2
        id: setup-terraform

      - name: Cache Terraform Modules
        uses: actions/cache@v2
        with:
          path: "~/.terraform.d/plugin-cache"
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: ${{ runner.os }}-terraform-

      # See also: https://github.com/actions/setup-go/pull/62
      - run: echo "GO_VERSION=$(cat .go-version)" >> $GITHUB_ENV
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Initialize Terraform
        id: init
        working-directory: ./tf
        run: terraform init -reconfigure -backend-config=./backends/${{ env.HM_ACTIVE_ENV }}.tfvars -var-file=./envs/${{ env.HM_ACTIVE_ENV }}.tfvars

      - name: Validate Terraform
        id: validate
        working-directory: ./tf
        run: terraform validate -no-color

      - name: Format Terraform
        id: fmt
        working-directory: ./tf
        run: terraform fmt -check

      - name: Get
        working-directory: ./tf
        run: terraform get -update=true

      - name: Plan Terraform Changes
        id: plan
        working-directory: ./tf
        run: |
          terraform plan \
            -no-color \
            -var-file=./envs/${{ env.HM_ACTIVE_ENV }}.tfvars \
            --out tf.plan \
            -input=false

      - name: Show
        if: steps.plan.outcome == 'success'
        working-directory: ./tf
        run: terraform show -no-color -json tf.plan 1>tf.json 2>/dev/null

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: tf-plan.json
          path: ./tf/tf.json

      - name: Apply
        if: steps.plan.outcome == 'success'
        id: apply
        working-directory: ./tf

        run: terraform apply -auto-approve -no-color -input=false tf.plan
